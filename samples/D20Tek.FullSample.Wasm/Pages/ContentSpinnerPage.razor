@page "/content-spinner"
<h3>ContentSpinner Component</h3>
<p>A spinner alerts a user that content is being loaded or processed, and they should wait for the activity to complete.
   This ContentSpinner shows and spins any render fragment passed as child content.</p>
<div class="d-flex align-items-center component-container">
    <div class="p-2 interactivity-card">
        <h5>Parameters</h5>
        <table class="table table-sm mb-0">
            <tbody>
                <tr>
                    <td><label for="option_content" style="margin-right: 5px;">Content</label></td>
                    <td><input type="text" id="option_content" style="width: 150px;" @bind-value=_interactiveContent></td>
                </tr>
                <tr>
                    <td><label for="option_size" style="margin-right: 5px;">Size</label></td>
                    <td>
                        <select id="option_size" @bind-value=_interactiveSize @bind-value:event="onchange">
                            <option value=@Size.ExtraSmall>Extra Small</option>
                            <option value=@Size.Small>Small</option>
                            <option value=@Size.Medium selected>Medium</option>
                            <option value=@Size.Large>Large</option>
                            <option value=@Size.ExtraLarge>Extra Large</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <td><label for="option_visible" style="margin-right: 5px;">IsVisible</label></td>
                    <td><ToggleSwitch id="option_visible" @bind-Checked=_interactiveVisibility Label="@_toggleLabel" /></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="p-2 flex-grow-1 justify-content-center" style="text-align: center">
        <ContentSpinner @bind-Size=_interactiveSize
                        @bind-IsVisible=_interactiveVisibility>
            <div style="display: table-cell; text-align: center; vertical-align: middle; width: inherit; height: inherit">
                @_interactiveContent
            </div>
        </ContentSpinner>
    </div>
</div>
<hr />

<h4>Default Content</h4>
<p>This is a spinner with the default properties and styles, and some text to spin.</p>
<pre><code>&lt;ContentSpinner&gt;Test!&lt;/ContentSpinner&gt;</code></pre>

<ContentSpinner>
    Test!
</ContentSpinner>
<hr />

<h4>Image Spinner</h4>
<p>This is a spinner with an image as content.</p>
<pre><code>
    &lt;ContentSpinner&gt;
        &lt;img alt="fidget spinner" height=64 width=64 src="./images/fidget-spinner.png" /&gt;
    &lt;/ContentSpinner&gt;
</code></pre>

<ContentSpinner>
    <img alt="fidget spinner" height=64 width=64 src="./images/fidget-spinner-green.png" />
</ContentSpinner>
<hr />

<h4>Div Spinner</h4>
<p>This is a spinner with more complex div as content.</p>
<pre><code>
    &lt;ContentSpinner&gt;
    &lt;div style="display: table-cell; border: 2px solid darkgreen; background-color: lightgreen;
        color: purple; border-radius: 10px; font-size: 16px; height: 96px; width: 96px; 
        text-align: center; vertical-align: middle"&gt;
        Click Me!
    &lt;/div&gt;
    &lt;/ContentSpinner&gt;
</code></pre>

<ContentSpinner>
    <div style="display: table-cell; border: 2px solid darkgreen; background-color: lightgreen; color: purple; border-radius: 10px; font-size: 16px; height: 96px; width: 96px; text-align: center; vertical-align: middle">
        Click Me!
    </div>
</ContentSpinner>
<hr />

<h4>Spinner Visibility</h4>
<p>This spinner allows changing of the IsVisible property to show and hide the spinner.</p>
<pre><code>&lt;ContentSpinner IsVisible=@this._spinnerVisible /&gt;</code></pre>
<div class="row">
    <div class="col-4">
        <button class="btn btn-outline-secondary" @onclick="ToggleSpinnerVisibility">
            Toggle Visibility
        </button>
    </div>
    <div class="col-4">
        <ContentSpinner IsVisible=@this._spinnerVisible>
            Test...
        </ContentSpinner>
    </div>
</div>
<hr />

<h4>Spinner Sizes</h4>
<p>This is a content spinner with different size settings.</p>
<pre><code>
    &lt;ContentSpinner Size=Size.Medium&gt;
        &lt;img alt="fidget spinner" src="./images/fidget-spinner.png" style="width: 100%; height: 100%" /&gt;
    &lt;/ContentSpinner&gt;
</code></pre>

<ContentSpinner Size=Size.ExtraSmall>
    <img alt="fidget spinner" src="./images/fidget-spinner-green.png" style="width: 100%; height: 100%" />
</ContentSpinner>
<ContentSpinner Size=Size.Small>
    <img alt="fidget spinner" src="./images/fidget-spinner-green.png" style="width: 100%; height: 100%" />
</ContentSpinner>
<ContentSpinner Size=Size.Medium>
    <img alt="fidget spinner" src="./images/fidget-spinner-green.png" style="width: 100%; height: 100%" />
</ContentSpinner>
<ContentSpinner Size=Size.Large>
    <img alt="fidget spinner" src="./images/fidget-spinner-green.png" style="width: 100%; height: 100%" />
</ContentSpinner>
<ContentSpinner Size=Size.ExtraLarge>
    <img alt="fidget spinner" src="./images/fidget-spinner-green.png" style="width: 100%; height: 100%" />
</ContentSpinner>

<hr />

@code {
    bool _spinnerVisible = true;
    string _interactiveContent = "text...";
    Size _interactiveSize = Size.Medium;
    bool _interactiveVisibility = true;
    string _toggleLabel => _interactiveVisibility ? "(visible)" : "(hidden)";

    private void ToggleSpinnerVisibility()
    {
        this._spinnerVisible = !this._spinnerVisible;
    }
}
