@page "/spinners"
<h3>Spinner Component</h3>

<h4>Default Spinner</h4>
<p>This is a spinner with the default properties and styles.</p>
<Spinner />
<hr />

<h4>Spinner With Styles</h4>
<p>This is a spinner where styles are defined: color: red; height:120 px; width: 120px.</p>
<Spinner style="color: red; height: 120px; width: 120px" />
<hr />

<h4>Spinner With Id CSS</h4>
<p>This is a spinner with a class based on element id. The CSS element changes several properties of the spinner component.</p>
<Spinner id="my-spinner" />
<hr />

<h4>Spinner With Additional Classes</h4>
<p>This is a spinner with an additional class name. The CSS element changes several properties of the spinner component.</p>
<Spinner class="my-custom-spinner" b-1vvd1ern0j/>
<hr />

<h4>Spinner Visibility</h4>
<p>This is a spinner that allows changing of the IsVisible property to show and hide the spinner.</p>
<div class="row">
    <div class="col">
        <button class="btn btn-outline-secondary" @onclick="ToggleSpinnerVisibility">
            Toggle Visibility
        </button>
    </div>
    <div class="col">
        <Spinner IsVisible=@this._spinnerVisible />
    </div>
</div>
<hr />

<h4>Spinner Type</h4>
<p>The Spinner component has different types of display: ring [default], pulse.</p>
<Spinner class="m-2" Type=SpinType.Ring />
<Spinner class="m-2" Type=SpinType.Pulse style="color: green" />
<Spinner class="m-2" Type=SpinType.Square style="color: darkorange" />
<hr />

@code {
    bool _spinnerVisible = true;

    private void ToggleSpinnerVisibility()
    {
        this._spinnerVisible = !this._spinnerVisible;
    }
}
